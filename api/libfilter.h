/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/allawesome497/filter/api */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "api.go"
#include "util.h"

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void print_rune_string(GoSlice in);
extern GoSlice get_words(GoInt matcherID);

// removes a matcher from the list of registered matchers
//
extern void free_matcher(GoInt matcherID);

// Gets the prefixes listed in a matcher
//
extern GoSlice get_prefixes(GoInt mathcherID);

// Gets the suffixes listed in a matcher
//
extern GoSlice get_suffixes(GoInt mathcherID);

// Gets a list of the dividers registered in a matcher.
//
extern GoSlice get_dividers(GoInt mathcherID);

// Gets a list of the ignored characters in a matcher.
//
extern GoSlice get_ignored(GoInt mathcherID);

// adds a word to a matcher
//
extern void add_word(GoInt matcherID, struct word word);

// Removes a word from a matcher.
//
extern void remove_word(GoInt matcherID, __filter_const_c_string str);
extern struct word* hmm();
extern char* test();

// Creates a new matcher and returns its ID.
//
extern GoInt new_matcher(GoSlice cWords, __filter_const_c_string cDividers, __filter_const_c_string cIgnored, GoSlice cPrefixes, GoSlice cSuffixes);

// Uses a matcher to check a string. Returns true if any of the matcher's words were found.
//
extern check_string_result check_string(GoInt matcherID, char* str);

// Adds a prefix to the matcher.
//
extern void add_prefix(GoInt matcherID, __filter_const_c_string prefix);

// Adds a prefix to the matcher.
//
extern void add_suffix(GoInt matcherID, __filter_const_c_string suffix);

// Adds a prefix to the matcher.
//
extern void remove_prefix(GoInt matcherID, __filter_const_c_string prefix);

// Removes a suffix from the matcher.
//
extern void remove_suffix(GoInt matcherID, __filter_const_c_string suffix);

// Adds a divider character to the matcher. Note that `divider` must be a single (unicode) char
//
extern void add_divider(GoInt matcherID, __filter_const_c_string divider);

// Removes an ignored character to a matcher.
// Note that `ignored` must be a single (unicode) char
//
extern void add_ignored(GoInt matcherID, __filter_const_c_string ignored);

// Removes a divider from a matcher. Note that `divider` must be a single (unicode) char
//
extern void remove_divider(GoInt matcherID, __filter_const_c_string divider);

// Removes an ignored character from a matcher. Note that `ignored` must be a single (unicode) char
//
extern void remove_ignored(GoInt matcherID, __filter_const_c_string ignored);

#ifdef __cplusplus
}
#endif
